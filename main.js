const express = require('express');
//const path = require('path');
const app = express();
const http = require('http').Server(app);
const io = require('socket.io')(http);
const GameBoard = require('./GameBoard');


//Server part
app.get('/', function (req, res) {
    res.sendFile(__dirname + '/index.html');
});

app.use('/public', express.static('public'));
var roomNum = 0;
//–≤–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
io.on('connection', function (socket) {
    //–∫–æ–º–Ω–∞—Ç—ã –ø–æ 2 —é–∑–µ—Ä–∞
    if (io.nsps['/'].adapter.rooms["room-" + roomNum] && io.nsps['/'].adapter.rooms["room-" + roomNum].length > 1) roomNum++;
    socket.join("room-" + roomNum);
    console.log('a user connected to room ' + roomNum);

    //Send this event to everyone in the room.
    var peopleNum = io.nsps['/'].adapter.rooms["room-" + roomNum].length;
    if (peopleNum === 1) {
        io.sockets.in("room-" + roomNum).emit('connectToRoom', roomNum);
    } else {
        // –µ—Å–ª–∏ 2 —á–µ–ª–æ–≤–µ–∫–∞, —Ç–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –¥—Ä–æ—Å–∫–∏. —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–æ–±–ª–µ–π —Ä–∞–Ω–¥–æ–º–Ω–æ
        let gbShown1 = new GameBoard();
        gbShown1.generateShips();
        gbShown1.randomPlace();
        const gbHidden1 = new GameBoard();

        let gbShown2 = new GameBoard();
        gbShown2.generateShips();
        gbShown2.randomPlace();
        const gbHidden2 = new GameBoard();
        console.log("created boards");
        io.sockets.in("room-" + roomNum).emit('connectToRoom', roomNum,
            peopleNum, gbShown1, gbHidden1, gbShown2, gbHidden2);


    }

    socket.on('disconnect', function () {
        // –≤–∫–ª—é—á–∞–µ—Ç—Å—è –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ—Ç–∫–ª—é—á–∏–ª—Å—è.
        // —Ç—É—Ç –µ—Å—Ç—å –±–∞–≥. –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –µ—Å–ª–∏ —Å–æ–∑–¥–¥–∞—Ç—å –ª–∏—Å—Ç –∫–æ–º–Ω–∞—Ç. –ø—Ä–æ–π—Ç–∏—Å—å —Ü–∏–∫–ª–æ–º –∏ —É–∑–Ω–∞—Ç—å –≤ –∫–∞–∫–æ–π –∫–æ–º–Ω–æ—Ç–µ 1 —á–µ–ª

        io.sockets.in("room-" + roomNum).emit('disconnected');
        console.log('user disconnected from ' + roomNum);
    });

    socket.on('chat message', function(msg){
        if (msg !== "1: " && msg !== "2: "){
        console.log('message: ' + msg);
        io.emit('chat message', msg);
        }
    });

    socket.on('turn', function (ID, Num) {
        //—ç—Ç–∞ —Ö–µ—Ä–Ω—è –¥–µ–ª–∞–µ—Ç –¥–æ—Å–∫—É –æ–¥–Ω–æ–≥–æ —á—É–≤–∞–∫–∞ –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
        console.log("Turn of " + ID + " player in " + Num + " room");
        io.sockets.in("room-" + Num).emit('setUnclickable', ID);
    });
    socket.on('random', function (ID, Num, gbShown1, gbHidden1, gbShown2, gbHidden2) {
        //—ç—Ç–∞ —Ö–µ—Ä–Ω—è –¥–µ–ª–∞–µ—Ç –¥–æ—Å–∫—É –æ–¥–Ω–æ–≥–æ —á—É–≤–∞–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–π
        console.log("id " + ID + " randomize " + Num + " room");
        if (ID === 1){
            gbShown1 = new GameBoard();
            gbShown1.generateShips();
            gbShown1.randomPlace();
            ID = 2;
        } else {
            gbShown2 = new GameBoard();
            gbShown2.generateShips();
            gbShown2.randomPlace();
            ID = 1;
        }
        io.sockets.in("room-" + Num).emit('update', ID, gbShown1, gbHidden1, gbShown2, gbHidden2);
    });

    socket.on('ready', function (ID, Num, gbShown1, gbHidden1, gbShown2, gbHidden2){
        io.sockets.in("room-" + Num).emit('update', ID, gbShown1, gbHidden1, gbShown2, gbHidden2);
    });

    socket.on('clicked', function (Num, ID, pos, gbShown1, gbHidden1, gbShown2, gbHidden2) {
        //–≤—Å–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å. –∏ –Ω–µ –ø–∏—Å–∞—Ç—å —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        //–∞—Ä–≥—É–º–µ–Ω—Ç—ã - –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã, –∏–¥ —á—É–≤–∞–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –∫–ª–∏–∫–Ω—É–ª, –ø–æ–∑–∏—Ü–∏—è –∫—É–¥–∞ –∫–ª–∏–∫–Ω—É–ª –∏ –¥–æ—Å–∫–∏
        var chords = pos.split(":");
        console.log(chords);
        var mainBoardHidden = gbHidden1;
        var otherBoardShown = gbShown2;

        if (ID === 2) {
            mainBoardHidden = gbHidden2;
            otherBoardShown = gbShown1;
        }

        if (otherBoardShown.board[chords[0]][chords[1]] === "üõ•") {
            mainBoardHidden.board[chords[0]][chords[1]] = "üí•";
            otherBoardShown.board[chords[0]][chords[1]] = "üí•";
            otherBoardShown.ships.forEach(function (ship) {
                ship.body.forEach(function (cell) {

                    if (cell[0] === parseInt(chords[0]) && cell[1] === parseInt(chords[1])) {
                        ship.hp--;
                        otherBoardShown.hp--;

                        if (ship.hp === 0) {
                            // —ç—Ç–∞ –¥–∏—á —Å—Ç–∞—Ç–∏—á–Ω–∞, —á—Ç–æ –±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä—ã—Ö.
                            // –∫–ª–∞—Å—Å —Ç–µ—Ä—è–µ—Ç—Å—è –∏ —Ç—É—Ç –¥–æ—Å–∫–∏ —ç—Ç–æ object
                            GameBoard.kill(mainBoardHidden, ship);
                            GameBoard.cover(mainBoardHidden, ship);
                            GameBoard.kill(otherBoardShown, ship);
                            console.log("room:" + Num + "player: " + ID + "killed ship " + ship);
                        }

                    }
                });
            });


            if (ID === 1) ID = 2;
            else ID = 1;

        } else {
            mainBoardHidden.board[chords[0]][chords[1]] = "üí¶";
            otherBoardShown.board[chords[0]][chords[1]] = "üí¶";
        }
        if (otherBoardShown.hp === 0) {
            console.log("Game ended");
            io.sockets.in("room-" + Num).emit('end', ID, gbShown1, gbHidden1, gbShown2, gbHidden2);
        } else {

            io.sockets.in("room-" + Num).emit('update', ID, gbShown1, gbHidden1, gbShown2, gbHidden2);
        }
    });


});

http.listen(3000, function () {
    console.log('listening on *:3000');
});
